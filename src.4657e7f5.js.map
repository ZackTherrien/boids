{"version":3,"sources":["../node_modules/@zacktherrien/typescript-render-engine/dist/Engine/index.js","../node_modules/@zacktherrien/typescript-render-engine/dist/types.js","../node_modules/@zacktherrien/typescript-render-engine/dist/RenderingLayer/index.js","../node_modules/@zacktherrien/typescript-render-engine/dist/RenderingLayer/StaticLayer/index.js","../node_modules/@zacktherrien/typescript-render-engine/dist/RenderingLayer/DynamicLayer/index.js","../node_modules/@zacktherrien/typescript-render-engine/dist/RenderingLayer/DeferredLayer/index.js","../node_modules/@zacktherrien/typescript-render-engine/dist/index.js","Boids/constants.ts","Boids/Vector2D/index.ts","Boids/Terrain/types.ts","Boids/colors.ts","Boids/helpers.ts","Boids/Behavior/BirdBehavior/index.ts","Boids/Behavior/BirdBehavior/Cohesion/index.ts","Boids/Behavior/BirdBehavior/Alignment/index.ts","Boids/Behavior/BirdBehavior/Separation/index.ts","Boids/Terrain/constants.ts","Boids/Behavior/BirdBehavior/Hunger/index.ts","Boids/Behavior/SelfBehavior/index.ts","Boids/Behavior/SelfBehavior/Eating/index.ts","Boids/Behavior/SelfBehavior/Exhaustion/index.ts","Boids/Bird/index.ts","../node_modules/fast-simplex-noise/src/index.ts","Boids/Terrain/Square/index.ts","Boids/Terrain/index.ts","Boids/MouseTools/SelectionTool/index.ts","Boids/MouseTools/index.ts","Boids/index.ts","index.ts"],"names":[],"mappings":"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","file":"src.4657e7f5.js","sourceRoot":"../src","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Engine {\n    constructor() {\n        this.layers = [];\n        this.layerCounter = 0;\n        this.shouldRender = true;\n        this.lastFrameRenderedTime = null;\n        this.renderingId = null;\n        this.currentDeltaTime = 0;\n        this.requestFrameA = this.requestFrameA.bind(this);\n        this.requestFrameB = this.requestFrameB.bind(this);\n    }\n    getLayer(layerIndex) {\n        return this.layers.find((layer) => layer.layerIndex === layerIndex) || null;\n    }\n    registerLayer(layer) {\n        this.layers.push(layer);\n    }\n    start() {\n        this.shouldRender = true;\n        this.renderingId = window.requestAnimationFrame(this.requestFrameA);\n    }\n    stop() {\n        this.shouldRender = false;\n        if (this.renderingId) {\n            window.cancelAnimationFrame(this.renderingId);\n        }\n    }\n    requestFrameA(timestamp) {\n        this.render(timestamp);\n        if (this.shouldRender) {\n            this.renderingId = window.requestAnimationFrame(this.requestFrameB);\n        }\n    }\n    requestFrameB(timestamp) {\n        this.render(timestamp);\n        if (this.shouldRender) {\n            this.renderingId = window.requestAnimationFrame(this.requestFrameA);\n        }\n    }\n    render(timestamp = 0) {\n        if (!this.lastFrameRenderedTime) {\n            this.lastFrameRenderedTime = timestamp;\n        }\n        this.currentDeltaTime = timestamp - this.lastFrameRenderedTime;\n        this.lastFrameRenderedTime = timestamp;\n        for (this.layerCounter = 0; this.layerCounter < this.layers.length; this.layerCounter++) {\n            this.layers[this.layerCounter].update(this.currentDeltaTime);\n            this.layers[this.layerCounter].render();\n        }\n    }\n}\nexports.default = Engine;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ResizeMethod;\n(function (ResizeMethod) {\n    ResizeMethod[ResizeMethod[\"FROM_ORIGIN\"] = 0] = \"FROM_ORIGIN\";\n    ResizeMethod[ResizeMethod[\"FROM_CENTER\"] = 1] = \"FROM_CENTER\";\n})(ResizeMethod = exports.ResizeMethod || (exports.ResizeMethod = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst types_1 = require(\"../types\");\nclass RenderingLayer {\n    constructor(layerIndex, initialWidth, initialHeight, initialX = 0, initialY = 0) {\n        this.layerIndex = layerIndex;\n        this.entities = [];\n        this.entityCounter = 0;\n        this.width = initialWidth === undefined ? document.body.clientWidth + 1 : initialWidth;\n        this.height = initialHeight === undefined ? document.body.clientHeight + 1 : initialHeight;\n        this.x = initialX;\n        this.y = initialY;\n        const canvas = document.createElement('canvas');\n        canvas.style.position = 'absolute';\n        canvas.style.zIndex = `${this.layerIndex}`;\n        canvas.style.display = 'inline';\n        document.body.appendChild(canvas);\n        const context = canvas.getContext('2d');\n        if (!context) {\n            throw new Error('Could not initialize canvas 2D context.');\n        }\n        this.context = context;\n        this.context.translate(-0.5, -0.5);\n        this.resize(this.width, this.height);\n        this.setPosition(this.x, this.y);\n    }\n    resize(newWidth, newHeight, resizeMethod = types_1.ResizeMethod.FROM_ORIGIN) {\n        let xOffset = 0;\n        let yOffset = 0;\n        if (resizeMethod === types_1.ResizeMethod.FROM_CENTER) {\n            xOffset = (this.width - newWidth) / 2;\n            yOffset = (this.height - newHeight) / 2;\n        }\n        this.width = newWidth;\n        this.height = newHeight;\n        this.context.canvas.width = this.width;\n        this.context.canvas.height = this.height;\n        this.setPosition(this.x + xOffset, this.y + yOffset);\n    }\n    setPosition(newX, newY) {\n        this.x = newX;\n        this.y = newY;\n        if (!this._isLayerWithinBounds()) {\n            throw new Error('Cannot position and resize a layer outside of document body.');\n        }\n        this.context.canvas.style.left = `${this.x}px`;\n        this.context.canvas.style.top = `${this.y}px`;\n    }\n    addEntity(entity) {\n        if (!this._isEntityValid(entity)) {\n            throw new Error('Invalid entity cannot be added to this layer.');\n        }\n        this.entities.push(entity);\n    }\n    removeEntity(removeEntity) {\n        const renderersIdx = this.entities.indexOf(removeEntity);\n        if (renderersIdx !== -1) {\n            this.entities.splice(renderersIdx, 1);\n        }\n    }\n    getWidth() {\n        return this.width;\n    }\n    getHeight() {\n        return this.height;\n    }\n    getX() {\n        return this.x;\n    }\n    getY() {\n        return this.y;\n    }\n    getContext() {\n        return this.context;\n    }\n    clear() {\n        this.context.clearRect(-1, -1, this.width, this.height);\n    }\n    update(deltaTime) {\n        var _a, _b;\n        for (this.entityCounter = 0; this.entityCounter < this.entities.length; this.entityCounter++) {\n            (_b = (_a = this.entities[this.entityCounter]).update) === null || _b === void 0 ? void 0 : _b.call(_a, deltaTime);\n        }\n    }\n    render() {\n        this.clear();\n        for (this.entityCounter = 0; this.entityCounter < this.entities.length; this.entityCounter++) {\n            this.entities[this.entityCounter].render(this.context);\n        }\n    }\n    _entityIsRenderable(entity) {\n        return Boolean(entity.render);\n    }\n    _entityIsUpdatable(entity) {\n        return Boolean(entity.update);\n    }\n    _isLayerWithinBounds() {\n        return (this.width + this.x > document.body.clientWidth ||\n            this.height + this.y > document.body.clientHeight ||\n            this.x < 0 ||\n            this.y < 0);\n    }\n}\nexports.RenderingLayer = RenderingLayer;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst __1 = require(\"..\");\nclass StaticLayer extends __1.RenderingLayer {\n    constructor(layerIndex, initialWidth, initialHeight, initialX = 0, initialY = 0) {\n        super(layerIndex, initialWidth, initialHeight, initialX, initialY);\n        this.rerenderNextFrame = false;\n    }\n    allowRenderOnNextFrame() {\n        this.rerenderNextFrame = true;\n    }\n    _isEntityValid(entity) {\n        return super._entityIsRenderable(entity);\n    }\n    render() {\n        if (this.rerenderNextFrame) {\n            this.rerenderNextFrame = false;\n            super.render();\n        }\n    }\n}\nexports.StaticLayer = StaticLayer;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst __1 = require(\"..\");\nclass DynamicLayer extends __1.RenderingLayer {\n    constructor(layerIndex, initialWidth, initialHeight, initialX = 0, initialY = 0) {\n        super(layerIndex, initialWidth, initialHeight, initialX, initialY);\n    }\n    _isEntityValid(entity) {\n        return super._entityIsRenderable(entity) && this._entityIsUpdatable(entity);\n    }\n}\nexports.DynamicLayer = DynamicLayer;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst __1 = require(\"..\");\nclass DeferredLayer extends __1.RenderingLayer {\n    constructor(deferredTime, layerIndex, initialWidth, initialHeight, initialX = 0, initialY = 0) {\n        super(layerIndex, initialWidth, initialHeight, initialX, initialY);\n        this.deferredTime = deferredTime;\n        this.elapsedTimeSinceRender = 0;\n    }\n    _isEntityValid(entity) {\n        return super._entityIsRenderable(entity) && this._entityIsUpdatable(entity);\n    }\n    update(deltaTime) {\n        this.elapsedTimeSinceRender += deltaTime;\n        if (this.elapsedTimeSinceRender > this.deferredTime) {\n            super.update(deltaTime);\n        }\n    }\n    render() {\n        if (this.elapsedTimeSinceRender > this.deferredTime) {\n            this.elapsedTimeSinceRender = 0;\n            super.render();\n        }\n    }\n}\nexports.DeferredLayer = DeferredLayer;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Engine_1 = __importDefault(require(\"./Engine\"));\nexports.default = Engine_1.default;\nvar RenderingLayer_1 = require(\"./RenderingLayer\");\nexports.RenderingLayer = RenderingLayer_1.RenderingLayer;\nvar StaticLayer_1 = require(\"./RenderingLayer/StaticLayer\");\nexports.StaticLayer = StaticLayer_1.StaticLayer;\nvar DynamicLayer_1 = require(\"./RenderingLayer/DynamicLayer\");\nexports.DynamicLayer = DynamicLayer_1.DynamicLayer;\nvar DeferredLayer_1 = require(\"./RenderingLayer/DeferredLayer\");\nexports.DeferredLayer = DeferredLayer_1.DeferredLayer;\n__export(require(\"./types\"));\n","export enum LayerIndex {\n    BACKGROUND,\n    BIRDS,\n    TOOLS,\n};\n\nexport const BIRD_COUNT = 750;\n\nexport const BIRD_WIDTH = 4;\nexport const BIRD_HEIGHT = 2;\nexport const BIRD_SPEED = 100 / 1000; // 60 pixels per 1000ms\n\nexport const BIRD_VISUAL_RANGE = 75;\n\nexport const MAX_BIRD_ENERGY = 500;\nexport const ACCELERATION_ENERGY_COST = 50 / 100; // 1 energy per 100 pixel accelaration \nexport const LIVING_ENERGY_COST = 10 / 1000; // 1 energy loss per second to live\nexport const BIRD_EATING_SPEED = 150/1000; // 150 energy per second can be consumed.\n\nexport const BIRD_SEPARATION_DISTANCE = 1.5*Math.sqrt(BIRD_WIDTH*BIRD_WIDTH + BIRD_HEIGHT*BIRD_HEIGHT); // x pixels before they move apart\nexport const BIRD_SEPARATION_EAGERNESS = 0.1;\nexport const BIRD_COHESION_EAGERNESS = 0.01; // Where 0 = Not Eager. 1 = Immediate change to coalesse\nexport const BIRD_ALIGNMENT_EAGERNESS = 0.1; // Where 0 = Not Eager. 1 = Immediate change.\n\nexport const BIRD_COMMUNAL_LANDING_DESIRE = 1; // birds will land if they see other birds landed\nexport const BIRD_HUNGER_LANDING_DESIRE = 1; // birds will land if they are hungry","export default class Vector2D {\n\n    x1: number;\n    x2: number;\n\n    constructor(x1: number = 0, x2: number = 0) {\n        this.x1 = x1;\n        this.x2 = x2;\n    }\n\n    static ZERO() {\n        return new Vector2D(0, 0);\n    }\n\n    static ONE() {\n        return new Vector2D(1, 1);\n    }\n\n    static CONST_ZERO = Vector2D.ZERO();\n    static CONST_ONE = Vector2D.ONE();\n\n    null() {\n        this.x1 = 0;\n        this.x2 = 0;\n    }\n\n    add(vector: Vector2D) {\n        this.x1 += vector.x1;\n        this.x2 += vector.x2;\n        return this;\n    }\n    \n    sub(vector: Vector2D) {\n        this.x1 -= vector.x1;\n        this.x2 -= vector.x2;\n        return this;\n    }\n\n    multiply(scalar: number) {\n        this.x1 *= scalar;\n        this.x2 *= scalar;\n        return this;\n    }\n\n    divide(scalar: number) {\n        this.x1 /= scalar;\n        this.x2 /= scalar;\n        return this;\n    }\n\n    normalize() {\n        const mag = this.magnitude();\n        if(mag === 0) {\n            return Vector2D.ZERO();\n        }\n        return this.divide(mag);\n    }\n\n    magnitude() {\n        return Math.sqrt(this.x1 * this.x1 + this.x2 * this.x2);\n    }\n\n    distance(vector: Vector2D): number {\n        return Math.sqrt((this.x1 - vector.x1) ** 2 + (this.x2 - vector.x2) ** 2)\n    }\n\n    clone() {\n        return new Vector2D(this.x1, this.x2);\n    }\n}","export enum SquareType {\n    DEEP_WATER,\n    SHORE_WATER,\n\n    SAND,\n    SWAMP,\n\n    GRASSLAND,\n    RAIN_FOREST,\n\n    MOUNTAIN,\n    SNOW_PEAK,\n};\n\nexport const LANDABLE_SQUARE_TYPES = [\n    SquareType.SAND,\n    SquareType.SWAMP,\n\n    SquareType.GRASSLAND,\n    SquareType.RAIN_FOREST,\n\n    SquareType.MOUNTAIN,\n    SquareType.SNOW_PEAK,\n];\n\nexport type TerrainDefinition = {\n    min: number,\n    max: number,\n};\n\nexport type TerrainDefinitions = {\n    height: TerrainDefinition,\n    humidity: TerrainDefinition,\n    moisture: TerrainDefinition,\n};","import { SquareType } from \"./Terrain/types\";\n\nexport const BirdColor = '#242124';\n\nexport const SquareColors = {\n    [SquareType.DEEP_WATER]: '#006B99',\n    [SquareType.SHORE_WATER]: '#008ECC',\n\n    [SquareType.SAND]: '#e5d8c1',\n    [SquareType.SWAMP]: '#555c45',\n\n    [SquareType.GRASSLAND]: '#bbcba0',\n    [SquareType.RAIN_FOREST]: '#92b29f',\n    \n    [SquareType.MOUNTAIN]: '#AAAAAA',\n    [SquareType.SNOW_PEAK]: '#FFFFFF',\n};","import Vector2D from \"./Vector2D\";\n\n/**\n * @param degree A number between 0 and 360\n */\nexport const fromDegree = (degree: number) => {\n    return degree * Math.PI / 180;\n};\n\nexport const getAngle = (vector: Vector2D) => {\n    return Math.atan2(vector.x2, vector.x1);\n}\n\nexport const flipVector = (vector: Vector2D, plane: 'x' | 'y', direction: 'left' | 'right' | 'up' | 'down') => {\n    const angle = getAngle(vector);\n\n\n    let normal = 0;\n    if (plane === 'x' && direction === 'left') {\n        normal = 0;\n    } else if (plane === 'x' && direction === 'right') {\n        normal = Math.PI;\n    } else if (plane === 'y' && direction === 'up') {\n        normal = Math.PI*0.5;\n    } else if (plane === 'y' && direction === 'down') {\n        normal = Math.PI*1.5;\n    }\n    const newAngle = normal * 2 - Math.PI - angle;\n\n    vector.x1 = Math.cos(newAngle);\n    vector.x2 = Math.sin(newAngle);\n};","import Vector2D from \"../../Vector2D\";\nimport { IBird } from \"../../Bird\";\n\nexport interface IBirdBehavior {\n    reset(): void;\n    perform(birdCount: number): Vector2D | null;\n    accumulate(boid: IBird): void;\n}\n\nexport default abstract class BirdBehavior implements IBirdBehavior {\n    value: Vector2D;\n    bird: IBird;\n\n    constructor(bird: IBird) {\n        this.bird = bird;\n        this.value = Vector2D.ZERO();\n    }\n\n    reset = () => {\n        this.value.null();\n    }\n\n    abstract perform(birdCount: number): Vector2D | null;\n\n    abstract accumulate(boid: IBird): void;\n\n}","import Vector2D from \"../../../Vector2D\";\nimport { IBird } from \"../../../Bird\";\nimport Behavior, { IBirdBehavior } from '..';\nimport { BIRD_SPEED, BIRD_COHESION_EAGERNESS } from \"../../../constants\";\n\ninterface ICohesion extends IBirdBehavior {\n}\n\nexport default class Cohesion extends Behavior implements ICohesion {\n    perform(birdCount: number): Vector2D {\n        return this.value\n            .divide(birdCount)      // average position of other birds\n            .sub(this.bird.position)     // how far away are they from this bird\n            .normalize()            // not normalizing means the average positions cancel out and the birds grind to a halt.\n            .multiply(BIRD_SPEED)   // \n            .sub(this.bird.velocity)     // subtract our velocity to get the force\n            .multiply(BIRD_COHESION_EAGERNESS); // change how fast birds want to coalesce\n    }\n\n    accumulate(bird: IBird) {\n        this.value.add(bird.position);\n    }\n}","import Vector2D from \"../../../Vector2D\";\nimport { IBird } from \"../../../Bird\";\nimport Behavior, { IBirdBehavior } from '..';\nimport { BIRD_SPEED, BIRD_ALIGNMENT_EAGERNESS } from \"../../../constants\";\n\ninterface IAlignment extends IBirdBehavior {\n}\n\nexport default class Alignment extends Behavior implements IAlignment {\n    perform(birdCount: number): Vector2D {\n        return this.value\n            .divide(birdCount)      // average velocity of other birds\n            .normalize()            // not normalizing means the average velocities cancel out and the birds grind to a halt.\n            .multiply(BIRD_SPEED)   // \n            .sub(this.bird.velocity)     // subtract our velocity to get the force\n            .multiply(BIRD_ALIGNMENT_EAGERNESS); // Change how fast birds want to align. 0 = No alignment, 1 = Immediate alignment.\n    }\n\n    accumulate(bird: IBird) {\n        this.value.add(bird.velocity);\n    }\n}","import Vector2D from \"../../../Vector2D\";\nimport { IBird } from \"../../../Bird\";\nimport Behavior, { IBirdBehavior } from '..';\nimport { BIRD_SPEED, BIRD_SEPARATION_DISTANCE, BIRD_SEPARATION_EAGERNESS } from \"../../../constants\";\n\ninterface ISeparation extends IBirdBehavior {\n}\n\nexport default class Separation extends Behavior implements ISeparation {\n    perform(birdCount: number): Vector2D {\n        return this.value\n            .divide(birdCount)\n            .normalize()            // not normalizing means the average velocities cancel out and the birds grind to a halt.\n            .multiply(BIRD_SPEED)   // \n            .sub(this.bird.velocity)     // find the difference between the separation velocity and ours.\n            .multiply(BIRD_SEPARATION_EAGERNESS); // Change how fast birds want to align. 0 = No alignment, 1 = Immediate alignment.\n    }\n\n    accumulate(bird: IBird) {\n        const positionDiff = this.bird.position\n            .clone()             // must clone because Vector2D is mutable\n            .sub(bird.position); // find the difference to the other bird\n\n        const distance = positionDiff.magnitude(); // find the distance\n        if(distance <= BIRD_SEPARATION_DISTANCE) {\n            this.value.add(     // add the force to our accumulator\n                positionDiff.divide(distance)\n            );\n        }\n    }\n}","import { SquareType, TerrainDefinitions } from \"./types\";\n\nexport const TERRAIN_UPDATE_RATE = 5000;\n\nexport const SQUARE_SIZE = 6;\n\nexport const SQUARE_FOODS: Map<SquareType, number> = new Map([\n    [\n        SquareType.DEEP_WATER, 0\n    ],\n    [\n        SquareType.SHORE_WATER, 0\n    ],\n    [\n        SquareType.SWAMP, 250\n    ],\n    [\n        SquareType.SAND, 50\n    ],\n\n    [\n        SquareType.GRASSLAND, 250\n    ],\n    [\n        SquareType.RAIN_FOREST, 1000\n    ],\n    [\n        SquareType.MOUNTAIN, 50\n    ],\n\n    [\n        SquareType.SNOW_PEAK, 0\n    ]\n])\n\nexport const SQUARE_TERRAIN_DEFINITIONS: Map<\n    SquareType, \n    TerrainDefinitions\n> = new Map([\n    [\n        SquareType.DEEP_WATER, \n        {\n            height: {\n                min: 0,\n                max: 0.35,\n            },\n            moisture: {\n                min: 0,\n                max: 1,\n            },\n            humidity: {\n                min: 0,\n                max: 1,\n            }\n        }\n    ],\n    [\n        SquareType.SHORE_WATER, \n        {\n            height: {\n                min: 0.35,\n                max: 0.45,\n            },\n            moisture: {\n                min: 0,\n                max: 0.7,\n            },\n            humidity: {\n                min: 0,\n                max: 1,\n            }\n        }\n    ],\n    [\n        SquareType.SWAMP, \n        {\n            height: {\n                min: 0.35,\n                max: 0.45,\n            },\n            moisture: {\n                min: 0.7,\n                max: 1,\n            },\n            humidity: {\n                min: 0,\n                max: 1,\n            }\n        }\n    ],\n    [\n        SquareType.SAND, \n        {\n            height: {\n                min: 0.45,\n                max: 0.7,\n            },\n            moisture: {\n                min: 0,\n                max: 0.4,\n            },\n            humidity: {\n                min: 0,\n                max: 1,\n            }\n        }\n    ],\n    [\n        SquareType.GRASSLAND, \n        {\n            height: {\n                min: 0.45,\n                max: 0.7,\n            },\n            moisture: {\n                min: 0.4,\n                max: 0.7,\n            },\n            humidity: {\n                min: 0,\n                max: 1,\n            }\n        }\n    ],\n    [\n        SquareType.RAIN_FOREST, \n        {\n            height: {\n                min: 0.45,\n                max: 0.7,\n            },\n            moisture: {\n                min: 0.7,\n                max: 1,\n            },\n            humidity: {\n                min: 0,\n                max: 1,\n            }\n        }\n    ],\n    [\n        SquareType.MOUNTAIN, \n        {\n            height: {\n                min: 0.7,\n                max: 0.8,\n            },\n            moisture: {\n                min: 0,\n                max: 1,\n            },\n            humidity: {\n                min: 0,\n                max: 1,\n            }\n        }\n    ],\n    [\n        SquareType.SNOW_PEAK, \n        {\n            height: {\n                min: 0.8,\n                max: 1,\n            },\n            moisture: {\n                min: 0,\n                max: 1,\n            },\n            humidity: {\n                min: 0,\n                max: 1,\n            }\n        }\n    ],\n\n    // [\n    //     SquareType.SNOW, \n    //     {\n    //         height: {\n    //             min: 0.8,\n    //             max: 1,\n    //         },\n    //         moisture: {\n    //             min: 0.5,\n    //             max: 1,\n    //         },\n    //         humidity: {\n    //             min: 0,\n    //             max: 1,\n    //         }\n    //     }\n    // ],\n    // [\n    //     SquareType.TUNDRA, \n    //     {\n    //         height: {\n    //             min: 0.8,\n    //             max: 1,\n    //         },\n    //         moisture: {\n    //             min: 0.3,\n    //             max: 0.5,\n    //         },\n    //         humidity: {\n    //             min: 0,\n    //             max: 1,\n    //         }\n    //     }\n    // ],\n    // [\n    //     SquareType.BARE, \n    //     {\n    //         height: {\n    //             min: 0.8,\n    //             max: 1,\n    //         },\n    //         moisture: {\n    //             min: 0.15,\n    //             max: 0.3,\n    //         },\n    //         humidity: {\n    //             min: 0,\n    //             max: 1,\n    //         }\n    //     }\n    // ],\n    // [\n    //     SquareType.SCORCHED, \n    //     {\n    //         height: {\n    //             min: 0.8,\n    //             max: 1,\n    //         },\n    //         moisture: {\n    //             min: 0,\n    //             max: 0.15,\n    //         },\n    //         humidity: {\n    //             min: 0,\n    //             max: 1,\n    //         }\n    //     }\n    // ],\n    \n    // [\n    //     SquareType.TAIGA, \n    //     {\n    //         height: {\n    //             min: 0.6,\n    //             max: 0.8,\n    //         },\n    //         moisture: {\n    //             min: 0.7,\n    //             max: 1,\n    //         },\n    //         humidity: {\n    //             min: 0,\n    //             max: 1,\n    //         }\n    //     }\n    // ],\n    // [\n    //     SquareType.SHRUBLAND, \n    //     {\n    //         height: {\n    //             min: 0.6,\n    //             max: 0.8,\n    //         },\n    //         moisture: {\n    //             min: 0.4,\n    //             max: 0.7,\n    //         },\n    //         humidity: {\n    //             min: 0,\n    //             max: 1,\n    //         }\n    //     }\n    // ],\n    // [\n    //     SquareType.TEMPERATE_DESERT, \n    //     {\n    //         height: {\n    //             min: 0.6,\n    //             max: 0.8,\n    //         },\n    //         moisture: {\n    //             min: 0,\n    //             max: 0.4,\n    //         },\n    //         humidity: {\n    //             min: 0,\n    //             max: 1,\n    //         }\n    //     }\n    // ],\n    // [\n    //     SquareType.TEMPERATE_RAIN_FOREST, \n    //     {\n    //         height: {\n    //             min: 0.4,\n    //             max: 0.6,\n    //         },\n    //         moisture: {\n    //             min: 0.8,\n    //             max: 1,\n    //         },\n    //         humidity: {\n    //             min: 0,\n    //             max: 1,\n    //         }\n    //     }\n    // ],\n    // [\n    //     SquareType.TEMPERATE_DECIDUOUS_FOREST, \n    //     {\n    //         height: {\n    //             min: 0.4,\n    //             max: 0.6,\n    //         },\n    //         moisture: {\n    //             min: 0.5,\n    //             max: 0.8,\n    //         },\n    //         humidity: {\n    //             min: 0,\n    //             max: 1,\n    //         }\n    //     }\n    // ],\n    // [\n    //     SquareType.GRASSLAND, \n    //     {\n    //         height: {\n    //             min: 0.4,\n    //             max: 0.6,\n    //         },\n    //         moisture: {\n    //             min: 0,\n    //             max: 0.3,\n    //         },\n    //         humidity: {\n    //             min: 0,\n    //             max: 1,\n    //         }\n    //     }\n    // ],\n    // // [\n    // //     SquareType.TEMPERATE_DESERT, \n    // //     {\n    // //         height: {\n    // //             min: 0.4,\n    // //             max: 0.6,\n    // //         },\n    // //         moisture: {\n    // //             min: 0,\n    // //             max: 0.3,\n    // //         },\n    // //         humidity: {\n    // //             min: 0,\n    // //             max: 1,\n    // //         }\n    // //     }\n    // // ],\n\n    // [\n    //     SquareType.TROPICAL_RAIN_FOREST, \n    //     {\n    //         height: {\n    //             min: 0.2,\n    //             max: 0.4,\n    //         },\n    //         moisture: {\n    //             min: 0.7,\n    //             max: 1,\n    //         },\n    //         humidity: {\n    //             min: 0,\n    //             max: 1,\n    //         }\n    //     }\n    // ],\n    // [\n    //     SquareType.TROPICAL_SEASONAL_FOREST, \n    //     {\n    //         height: {\n    //             min: 0.2,\n    //             max: 0.4,\n    //         },\n    //         moisture: {\n    //             min: 0.4,\n    //             max: 0.7,\n    //         },\n    //         humidity: {\n    //             min: 0,\n    //             max: 1,\n    //         }\n    //     }\n    // ],\n    // [\n    //     SquareType.SUBTROPICAL_DESERT, \n    //     {\n    //         height: {\n    //             min: 0.2,\n    //             max: 0.4,\n    //         },\n    //         moisture: {\n    //             min: 0,\n    //             max: 0.4,\n    //         },\n    //         humidity: {\n    //             min: 0,\n    //             max: 1,\n    //         }\n    //     }\n    // ],\n]);","import Vector2D from \"../../../Vector2D\";\nimport Boids from \"../../..\";\nimport { IBird } from \"../../../Bird\";\n\nimport Behavior, { IBirdBehavior } from '..';\n\nimport { \n    BIRD_VISUAL_RANGE, \n    MAX_BIRD_ENERGY,\n    BIRD_COMMUNAL_LANDING_DESIRE,\n    BIRD_HUNGER_LANDING_DESIRE\n} from \"../../../constants\";\nimport { SQUARE_SIZE } from \"../../../Terrain/constants\";\n\ninterface IHunger extends IBirdBehavior {\n}\n\nexport default class Hunger extends Behavior implements IHunger {\n    goUp(pOffset: Vector2D) {\n        pOffset.x2 -= 1;\n    }\n\n    goDown(pOffset: Vector2D) {\n        pOffset.x2 += 1;\n    }\n\n    goRight(pOffset: Vector2D) {\n        pOffset.x1 += 1;\n    }\n\n    goLeft(pOffset: Vector2D) {\n        pOffset.x1 -= 1;\n    }\n    \n    /**\n     * Walk the squares around the bird outwards.\n     * 5   4   3\n     * 6   1   2\n     * 7   8   9 \n     */\n    walkAroundRange(pOffset: Vector2D) {\n        if(pOffset.x1 === 0 && pOffset.x2 === 0) {\n            pOffset.x1 = 1;\n        }\n        if(Math.abs(pOffset.x1) === Math.abs(pOffset.x2)) {\n            if(pOffset.x1 > 0 && pOffset.x2 > 0) {\n                this.goLeft(pOffset);\n            }else if(pOffset.x1 < 0 && pOffset.x2 > 0) {\n                this.goDown(pOffset);\n            }else if(pOffset.x1 < 0 && pOffset.x2 < 0) {\n                this.goRight(pOffset);\n            }else if(pOffset.x1 > 0 && pOffset.x2 < 0) {\n                this.goUp(pOffset);\n            }\n        } else {\n            if(pOffset.x1 > pOffset.x2 && Math.abs(pOffset.x1) > Math.abs(pOffset.x2)) {\n                this.goUp(pOffset);\n            }else if(pOffset.x1 < pOffset.x2 && Math.abs(pOffset.x1) < Math.abs(pOffset.x2)) {\n                this.goLeft(pOffset);\n            }else if(pOffset.x1 < pOffset.x2 && Math.abs(pOffset.x1) > Math.abs(pOffset.x2)) {\n                this.goDown(pOffset);\n            }else if(pOffset.x1 > pOffset.x2 && Math.abs(pOffset.x1) < Math.abs(pOffset.x2)) {\n                this.goRight(pOffset);\n            }\n        }\n    }\n\n    /**\n     * Returns the vector towards the first food block.\n     */\n    performFoodSearch(): Vector2D | null {\n        let squareCenter;\n        let square;\n        let x;\n        const startingLocation = Boids.instance.terrain.getSquareAtLocation(this.bird.position);\n        if(!startingLocation) return null;\n\n        const squaresInVisualRange = (BIRD_VISUAL_RANGE / SQUARE_SIZE) * 2;\n        const pOffset = new Vector2D(0,0);\n        for(x = 0; x<squaresInVisualRange; x++) {\n            square = Boids.instance.terrain.getSquareAtCoord(pOffset.x1 + startingLocation.x, pOffset.x2 + startingLocation.y);\n\n\n            if(square && square.foodLevel > 0) {\n                squareCenter = square.getPixelCenter();\n                if(this.bird.position.distance(square.getPixelCenter()) < BIRD_VISUAL_RANGE) {\n                    return squareCenter\n                        .clone()\n                        .sub(this.bird.position);\n                }\n            }\n            \n            this.walkAroundRange(pOffset);\n        }\n        return null;\n    }\n    \n    perform(birdCount: number): Vector2D | null {\n        this.value.x1 /= birdCount; // average the position of nearby birds.\n        this.value.x2 = (this.bird.energy / MAX_BIRD_ENERGY) * BIRD_HUNGER_LANDING_DESIRE; // get percent hunger.\n\n        const desireToLand = 1 - this.value.magnitude();\n        // where desireToLand of 0 = do not land. 1 = land right now.\n\n        if(desireToLand > 0.5) {\n            const foodSquareVector = this.performFoodSearch();\n            if(!foodSquareVector) return null;\n\n            if(foodSquareVector.magnitude() < SQUARE_SIZE) {\n                this.bird.landed = true;\n                return null;\n            } else {\n                return foodSquareVector\n                    .normalize()                // not normalizing means the average velocities cancel out and the birds grind to a halt.\n                    .multiply(this.bird.velocity.magnitude())\n                    .sub(this.bird.velocity)    // subtract our velocity to get the force\n                    .multiply(desireToLand); // Change how fast birds want to align. 0 = No alignment, 1 = Immediate alignment.\n            }\n        } else {\n            // no desire to land. Find the next nearest desire.\n\n            return null;\n        }\n    }\n\n    accumulate(bird: IBird) {\n        if(bird.landed) {\n            // landed birds, very close by will increase desire to land\n            this.value.x1 += (1 - bird.position.distance(this.bird.position) / BIRD_VISUAL_RANGE) * BIRD_COMMUNAL_LANDING_DESIRE;\n        }\n    }\n}","import { IBird } from \"../../Bird\";\n\nexport interface ISelfBehavior {\n    reset(): void;\n    perform(deltaTime: number): void;\n}\n\nexport default abstract class SelfBehavior implements ISelfBehavior {\n    value: number;\n    bird: IBird;\n\n    constructor(bird: IBird) {\n        this.bird = bird;\n        this.value = 0;\n    }\n\n    reset = () => {\n        this.value = 0;\n    }\n\n    abstract perform(deltaTime: number): void;\n}","import SelfBehavior, { ISelfBehavior } from \"..\";\nimport { \n    BIRD_EATING_SPEED,\n    MAX_BIRD_ENERGY,\n} from \"../../../constants\";\nimport Boids from \"../../..\";\n\ninterface IEating extends ISelfBehavior {\n}\n\nexport default class Eating extends SelfBehavior implements IEating {\n    perform(deltaTime: number) {\n        if(this.bird.landed) {\n            const square = Boids.instance.terrain.getSquareAtLocation(this.bird.position);\n            if(square && square.foodLevel > 0) {\n                const potentialConsumption = BIRD_EATING_SPEED * deltaTime;\n                let actualConsumption = potentialConsumption;\n                if(potentialConsumption > square.foodLevel) {\n                    actualConsumption = square.foodLevel;\n                }\n                if(actualConsumption + this.bird.energy > MAX_BIRD_ENERGY) {\n                    actualConsumption = MAX_BIRD_ENERGY - this.bird.energy;\n                }\n\n                // birds will consume everything until there is no more food.\n                square.foodLevel -= actualConsumption;\n                this.bird.energy += actualConsumption;\n                if(this.bird.energy >= MAX_BIRD_ENERGY) {\n                    this.bird.landed = false;\n                }\n            } else {\n                this.bird.landed = false;\n            }\n        }\n    }\n}","import SelfBehavior, { ISelfBehavior } from \"..\";\nimport { \n    ACCELERATION_ENERGY_COST,\n    LIVING_ENERGY_COST,\n    // BIRD_VISUAL_RANGE\n} from \"../../../constants\";\n\ninterface IExhaustion extends ISelfBehavior {\n}\n\nexport default class Exhaustion extends SelfBehavior implements IExhaustion {\n    perform(deltaTime: number) {\n        this.bird.energy -= (\n            ACCELERATION_ENERGY_COST * this.bird.acceleration.magnitude() * deltaTime * deltaTime +\n            LIVING_ENERGY_COST * deltaTime\n        );\n    }\n}","import { IEntity } from \"@zacktherrien/typescript-render-engine\";\nimport Vector2D from \"../Vector2D\";\nimport Boids from '../';\n\n// Constants, helpers, colors\nimport { \n    BIRD_WIDTH, \n    BIRD_HEIGHT, \n    BIRD_SPEED,\n    BIRD_VISUAL_RANGE,\n    MAX_BIRD_ENERGY,\n} from '../constants';\nimport { BirdColor } from \"../colors\";\nimport { fromDegree, getAngle } from '../helpers';\n\n// Behaviors\nimport { IBirdBehavior } from \"../Behavior/BirdBehavior\";\nimport Cohesion from \"../Behavior/BirdBehavior/Cohesion\";\nimport Alignment from \"../Behavior/BirdBehavior/Alignment\";\nimport Separation from \"../Behavior/BirdBehavior/Separation\";\nimport Hunger from \"../Behavior/BirdBehavior/Hunger\";\n\nimport { ISelfBehavior } from \"../Behavior/SelfBehavior\";\nimport Eating from \"../Behavior/SelfBehavior/Eating\";\nimport Exhaustion from \"../Behavior/SelfBehavior/Exhaustion\";\n\nexport interface IBird extends IEntity {\n    position: Vector2D;\n    velocity: Vector2D;\n    acceleration: Vector2D;\n\n    energy: number;\n\n    landed: boolean;\n}\n\nexport default class Bird implements IBird {\n    \n    boids: Boids;\n\n    position: Vector2D;\n    velocity: Vector2D;\n    acceleration: Vector2D;\n\n    energy: number;\n\n    landed: boolean;\n\n    birdRules: Array<IBirdBehavior>;\n    selfRules: Array<ISelfBehavior>;\n\n    constructor(boids: Boids, initialX: number, initialY: number) {\n        this.boids = boids;\n\n        this.position = new Vector2D(initialX, initialY);\n        const randomAngle = fromDegree(Math.random() * 360);\n        this.velocity = new Vector2D(\n            Math.cos(randomAngle),\n            Math.sin(randomAngle)\n        )\n            .normalize()\n            .multiply(BIRD_SPEED * Math.random());\n        this.acceleration = Vector2D.ZERO();\n\n        this.energy = MAX_BIRD_ENERGY * 0.5 + MAX_BIRD_ENERGY * Math.random();\n\n        this.birdRules = [\n            new Cohesion(this),\n            new Alignment(this),\n            new Separation(this),\n            new Hunger(this),\n        ];\n\n        this.selfRules = [\n            new Exhaustion(this),\n            new Eating(this),\n        ];\n\n        this.landed = false;\n    }\n\n    resetAccumulators() {\n        for(let i = 0; i<this.birdRules.length; i++) {\n            this.birdRules[i].reset();\n        }\n    }\n\n    /**\n     * Perform all maneuvers for this bird.\n     * @param birds The birds in range of this bird\n     */\n    performManeuvers(birds: Array<IBird>) {\n        this.resetAccumulators();\n\n        if(!this.landed) {\n            let perceivedBirdCount = 0;\n            for(let i = 0; i<birds.length; i++) {\n                if(\n                    !birds[i].landed &&     // only flying birds are taken into account\n                    birds[i] !== this &&    // that is not this bird\n                    birds[i].position.distance(this.position) < BIRD_VISUAL_RANGE // and is in range\n                ) {\n                    perceivedBirdCount += 1;\n                    for(let r = 0; r<this.birdRules.length; r++) {\n                        this.birdRules[r].accumulate(birds[i]);\n                    }\n                }\n            }\n    \n            // Flock mechanics\n            if(perceivedBirdCount !== 0) {\n                let force\n                for(let i = 0; i<this.birdRules.length; i++) {\n                    force = this.birdRules[i].perform(perceivedBirdCount);\n                    if(force) {\n                        this.acceleration.add(force);\n                    }\n                }\n                // TODO: Limit acceleration.\n            }\n        }\n        this.checkVelocity();\n    }\n\n    performSenses(deltaTime: number) {\n        for(let i = 0; i<this.selfRules.length; i++) {\n            this.selfRules[i].perform(deltaTime);\n        }\n    }\n\n    checkBoundary() {\n        if(this.position.x1 < 0){\n            this.position.x1 = Boids.instance.maxX;\n        } else if(this.position.x1 > Boids.instance.maxX){\n            this.position.x1 = 0;\n        }\n        if(this.position.x2 < 0){\n            this.position.x2 = Boids.instance.maxY;\n        } else if(this.position.x2 > Boids.instance.maxY){\n            this.position.x2 = 0;\n        }\n    }\n\n    checkVelocity() {\n        // limit velocity:\n        if (this.velocity.magnitude() > BIRD_SPEED) {\n            this.velocity\n                .normalize()\n                .multiply(BIRD_SPEED);\n        }\n    }\n\n    die() {\n        this.boids.birds.splice(this.boids.birds.indexOf(this), 1);\n        this.boids.birdLayer.removeEntity(this);\n    }\n\n    update(deltaTime: number) {\n        this.performSenses(deltaTime);\n        this.performManeuvers(this.boids.birds);\n\n        if(!this.landed) {\n            this.position.add(\n                this.velocity\n                    .clone() // we must clone because multiply mutates the object.\n                    .multiply(deltaTime)\n            );\n        }\n        this.velocity.add(this.acceleration);\n        this.acceleration.null();\n        this.checkBoundary();\n\n        if(this.energy < 0) {\n            this.die();\n        }\n    }\n\n    render(context: CanvasRenderingContext2D) {\n        this.rotate(context);\n        context.strokeStyle = BirdColor;\n        context.beginPath();\n        context.moveTo(this.position.x1 + BIRD_WIDTH/2, this.position.x2);\n        context.lineTo(this.position.x1 - BIRD_WIDTH/2, this.position.x2 + BIRD_HEIGHT/2);\n        context.lineTo(this.position.x1 - BIRD_WIDTH/2, this.position.x2 - BIRD_HEIGHT/2);\n        context.closePath();\n        context.fill();\n\n        // context.strokeStyle = 'green';\n        // context.beginPath();\n        // context.arc(this.position.x1, this.position.x2, this.visibilityLeft.x2, this.visibilityLeft.x1, this.visibilityLeft.x1 - SIGHT_ANGLE, true);\n\n        // context.stroke();\n\n        // context.beginPath();\n        // context.arc(this.position.x1, this.position.x2, this.visibilityRight.x2, this.visibilityRight.x1, Math.PI, true);\n        // context.closePath();\n        // context.stroke();\n\n        \n        this.unrotate(context);\n    }\n\n    rotate(context: CanvasRenderingContext2D) {\n        // Move registration point to the center of the bird\n        context.translate(this.position.x1, this.position.x2);\n        // Rotate degree\n        context.rotate(getAngle(this.velocity));\n        context.translate(-this.position.x1, -this.position.x2);\n    }\n\n    unrotate(context: CanvasRenderingContext2D) {\n        context.translate(this.position.x1, this.position.x2);\n        // Rotate degree\n        context.rotate(-getAngle(this.velocity));\n        // Move registration point back to the top left corner of canvas\n        context.translate(-this.position.x1, -this.position.x2);\n    }\n}","/*\n * A speed-improved simplex noise algorithm for 2D, 3D and 4D in JavaScript.\n *\n * Based on example code by Stefan Gustavson (stegu@itn.liu.se).\n * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\n * Better rank ordering method by Stefan Gustavson in 2012.\n *\n * This code was placed in the public domain by its original author,\n * Stefan Gustavson. You may use it as you see fit, but\n * attribution is appreciated.\n */\n\nexport interface Options {\n  amplitude?: number\n  frequency?: number\n  max?: number\n  min?: number\n  octaves?: number\n  persistence?: number\n  random?: () => number\n}\n\nexport default class FastSimplexNoise {\n  readonly amplitude: number\n  readonly frequency: number\n  readonly octaves: number\n  readonly perm: Uint8Array\n  readonly permMod12: Uint8Array\n  readonly persistence: number\n  readonly random: () => number\n  readonly scale: (value: number) => number\n\n  static G2 = (3.0 - Math.sqrt(3.0)) / 6.0\n  static G3 = 1.0 / 6.0\n  static G4 = (5.0 - Math.sqrt(5.0)) / 20.0\n\n  static GRAD3D = [\n    [1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0],\n    [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1],\n    [0, 1, 1], [0, -1, -1], [0, 1, -1], [0, -1, -1]\n  ]\n\n  static GRAD4D = [\n    [0, 1, 1, 1], [0, 1, 1, -1], [0, 1, -1, 1], [0, 1, -1, -1],\n    [0, -1, 1, 1], [0, -1, 1, -1], [0, -1, -1, 1], [0, -1, -1, -1],\n    [1, 0, 1, 1], [1, 0, 1, -1], [1, 0, -1, 1], [1, 0, -1, -1],\n    [-1, 0, 1, 1], [-1, 0, 1, -1], [-1, 0, -1, 1], [-1, 0, -1, -1],\n    [1, 1, 0, 1], [1, 1, 0, -1], [1, -1, 0, 1], [1, -1, 0, -1],\n    [-1, 1, 0, 1], [-1, 1, 0, -1], [-1, -1, 0, 1], [-1, -1, 0, -1],\n    [1, 1, 1, 0], [1, 1, -1, 0], [1, -1, 1, 0], [1, -1, -1, 0],\n    [-1, 1, 1, 0], [-1, 1, -1, 0], [-1, -1, 1, 0], [-1, -1, -1, 0]\n  ]\n\n  constructor (options: Options = {}) {\n    if (options.hasOwnProperty('amplitude')) {\n      if (typeof options.amplitude !== 'number') throw new Error('options.amplitude must be a number')\n      this.amplitude = options.amplitude\n    } else this.amplitude = 1.0\n\n    if (options.hasOwnProperty('frequency')) {\n      if (typeof options.frequency !== 'number') throw new Error('options.frequency must be a number')\n      this.frequency = options.frequency\n    } else this.frequency = 1.0\n\n    if (options.hasOwnProperty('octaves')) {\n      if (typeof options.octaves !== 'number' ||\n        !isFinite(options.octaves) ||\n        Math.floor(options.octaves) !== options.octaves\n      ) {\n        throw new Error('options.octaves must be an integer')\n      }\n      this.octaves = options.octaves\n    } else this.octaves = 1\n\n    if (options.hasOwnProperty('persistence')) {\n      if (typeof options.persistence !== 'number') throw new Error('options.persistence must be a number')\n      this.persistence = options.persistence\n    } else this.persistence = 0.5\n\n    if (options.hasOwnProperty('random')) {\n      if (typeof options.random !== 'function') throw new Error('options.random must be a function')\n      this.random = options.random\n    } else this.random = Math.random\n\n    let min: number\n    if (options.hasOwnProperty('min')) {\n      if (typeof options.min !== 'number') throw new Error('options.min must be a number')\n      min = options.min\n    } else min = -1\n\n    let max: number\n    if (options.hasOwnProperty('max')) {\n      if (typeof options.max !== 'number') throw new Error('options.max must be a number')\n      max = options.max\n    } else max = 1\n\n    if (min >= max) throw new Error(`options.min (${min}) must be less than options.max (${max})`)\n\n    this.scale = min === -1 && max === 1\n      ? value => value\n      : value => min + ((value + 1) / 2) * (max - min)\n\n    const p = new Uint8Array(256)\n    for (let i = 0; i < 256; i++) p[i] = i\n\n    let n: number\n    let q: number\n    for (let i = 255; i > 0; i--) {\n      n = Math.floor((i + 1) * this.random())\n      q = p[i]\n      p[i] = p[n]\n      p[n] = q\n    }\n\n    this.perm = new Uint8Array(512)\n    this.permMod12 = new Uint8Array(512)\n    for (let i = 0; i < 512; i++) {\n      this.perm[i] = p[i & 255]\n      this.permMod12[i] = this.perm[i] % 12\n    }\n  }\n\n  cylindrical (circumference: number, coords: number[]): number | null {\n    switch (coords.length) {\n      case 2: return this.cylindrical2D(circumference, coords[0], coords[1])\n      case 3: return this.cylindrical3D(circumference, coords[0], coords[1], coords[2])\n      default: return null\n    }\n  }\n\n  cylindrical2D (circumference: number, x: number, y: number): number {\n    const nx = x / circumference\n    const r = circumference / (2 * Math.PI)\n    const rdx = nx * 2 * Math.PI\n    const a = r * Math.sin(rdx)\n    const b = r * Math.cos(rdx)\n\n    return this.scaled3D(a, b, y)\n  }\n\n  cylindrical3D (circumference: number, x: number, y: number, z: number) {\n    const nx = x / circumference\n    const r = circumference / (2 * Math.PI)\n    const rdx = nx * 2 * Math.PI\n    const a = r * Math.sin(rdx)\n    const b = r * Math.cos(rdx)\n\n    return this.scaled4D(a, b, y, z)\n  }\n\n  dot (gs: number[], coords: number[]): number {\n    return gs\n      .slice(0, Math.min(gs.length, coords.length))\n      .reduce((total, g, i) => total + (g * coords[i]), 0)\n  }\n\n  raw (coords: number[]): number | null {\n    switch (coords.length) {\n      case 2: return this.raw2D(coords[0], coords[1])\n      case 3: return this.raw3D(coords[0], coords[1], coords[2])\n      case 4: return this.raw4D(coords[0], coords[1], coords[2], coords[3])\n      default: return null\n    }\n  }\n\n  raw2D (x: number, y: number): number {\n    // Skew the input space to determine which simplex cell we're in\n    const s = (x + y) * 0.5 * (Math.sqrt(3.0) - 1.0) // Hairy factor for 2D\n    const i = Math.floor(x + s)\n    const j = Math.floor(y + s)\n    const t = (i + j) * FastSimplexNoise.G2\n    const X0 = i - t // Unskew the cell origin back to (x,y) space\n    const Y0 = j - t\n    const x0 = x - X0 // The x,y distances from the cell origin\n    const y0 = y - Y0\n\n    // Determine which simplex we are in.\n    const i1 = x0 > y0 ? 1 : 0\n    const j1 = x0 > y0 ? 0 : 1\n\n    // Offsets for corners\n    const x1 = x0 - i1 + FastSimplexNoise.G2\n    const y1 = y0 - j1 + FastSimplexNoise.G2\n    const x2 = x0 - 1.0 + 2.0 * FastSimplexNoise.G2\n    const y2 = y0 - 1.0 + 2.0 * FastSimplexNoise.G2\n\n    // Work out the hashed gradient indices of the three simplex corners\n    const ii = i & 255\n    const jj = j & 255\n    const gi0 = this.permMod12[ii + this.perm[jj]]\n    const gi1 = this.permMod12[ii + i1 + this.perm[jj + j1]]\n    const gi2 = this.permMod12[ii + 1 + this.perm[jj + 1]]\n\n    // Calculate the contribution from the three corners\n    const t0 = 0.5 - x0 * x0 - y0 * y0\n    const n0 = t0 < 0 ? 0.0 : Math.pow(t0, 4) * this.dot(FastSimplexNoise.GRAD3D[gi0], [x0, y0])\n    const t1 = 0.5 - x1 * x1 - y1 * y1\n    const n1 = t1 < 0 ? 0.0 : Math.pow(t1, 4) * this.dot(FastSimplexNoise.GRAD3D[gi1], [x1, y1])\n    const t2 = 0.5 - x2 * x2 - y2 * y2\n    const n2 = t2 < 0 ? 0.0 : Math.pow(t2, 4) * this.dot(FastSimplexNoise.GRAD3D[gi2], [x2, y2])\n\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1, 1]\n    return 70.14805770653952 * (n0 + n1 + n2)\n  }\n\n  raw3D (x: number, y: number, z: number): number {\n    // Skew the input space to determine which simplex cell we're in\n    const s = (x + y + z) / 3.0 // Very nice and simple skew factor for 3D\n    const i = Math.floor(x + s)\n    const j = Math.floor(y + s)\n    const k = Math.floor(z + s)\n    const t = (i + j + k) * FastSimplexNoise.G3\n    const X0 = i - t // Unskew the cell origin back to (x,y,z) space\n    const Y0 = j - t\n    const Z0 = k - t\n    const x0 = x - X0 // The x,y,z distances from the cell origin\n    const y0 = y - Y0\n    const z0 = z - Z0\n\n    // Deterine which simplex we are in\n    let i1: number, j1: number, k1: number // Offsets for second corner of simplex in (i,j,k) coords\n    let i2: number, j2: number, k2: number // Offsets for third corner of simplex in (i,j,k) coords\n    if (x0 >= y0) {\n      if (y0 >= z0) {\n        i1 = i2 = j2 = 1\n        j1 = k1 = k2 = 0\n      } else if (x0 >= z0) {\n        i1 = i2 = k2 = 1\n        j1 = k1 = j2 = 0\n      } else {\n        k1 = i2 = k2 = 1\n        i1 = j1 = j2 = 0\n      }\n    } else {\n      if (y0 < z0) {\n        k1 = j2 = k2 = 1\n        i1 = j1 = i2 = 0\n      } else if (x0 < z0) {\n        j1 = j2 = k2 = 1\n        i1 = k1 = i2 = 0\n      } else {\n        j1 = i2 = j2 = 1\n        i1 = k1 = k2 = 0\n      }\n    }\n\n    const x1 = x0 - i1 + FastSimplexNoise.G3 // Offsets for second corner in (x,y,z) coords\n    const y1 = y0 - j1 + FastSimplexNoise.G3\n    const z1 = z0 - k1 + FastSimplexNoise.G3\n    const x2 = x0 - i2 + 2.0 * FastSimplexNoise.G3 // Offsets for third corner in (x,y,z) coords\n    const y2 = y0 - j2 + 2.0 * FastSimplexNoise.G3\n    const z2 = z0 - k2 + 2.0 * FastSimplexNoise.G3\n    const x3 = x0 - 1.0 + 3.0 * FastSimplexNoise.G3 // Offsets for last corner in (x,y,z) coords\n    const y3 = y0 - 1.0 + 3.0 * FastSimplexNoise.G3\n    const z3 = z0 - 1.0 + 3.0 * FastSimplexNoise.G3\n\n    // Work out the hashed gradient indices of the four simplex corners\n    const ii = i & 255\n    const jj = j & 255\n    const kk = k & 255\n    const gi0 = this.permMod12[ii + this.perm[jj + this.perm[kk]]]\n    const gi1 = this.permMod12[ii + i1 + this.perm[jj + j1 + this.perm[kk + k1]]]\n    const gi2 = this.permMod12[ii + i2 + this.perm[jj + j2 + this.perm[kk + k2]]]\n    const gi3 = this.permMod12[ii + 1 + this.perm[jj + 1 + this.perm[kk + 1]]]\n\n    // Calculate the contribution from the four corners\n    const t0 = 0.5 - x0 * x0 - y0 * y0 - z0 * z0\n    const n0 = t0 < 0 ? 0.0 : Math.pow(t0, 4) * this.dot(FastSimplexNoise.GRAD3D[gi0], [x0, y0, z0])\n    const t1 = 0.5 - x1 * x1 - y1 * y1 - z1 * z1\n    const n1 = t1 < 0 ? 0.0 : Math.pow(t1, 4) * this.dot(FastSimplexNoise.GRAD3D[gi1], [x1, y1, z1])\n    const t2 = 0.5 - x2 * x2 - y2 * y2 - z2 * z2\n    const n2 = t2 < 0 ? 0.0 : Math.pow(t2, 4) * this.dot(FastSimplexNoise.GRAD3D[gi2], [x2, y2, z2])\n    const t3 = 0.5 - x3 * x3 - y3 * y3 - z3 * z3\n    const n3 = t3 < 0 ? 0.0 : Math.pow(t3, 4) * this.dot(FastSimplexNoise.GRAD3D[gi3], [x3, y3, z3])\n\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to stay just inside [-1,1]\n    return 94.68493150681972 * (n0 + n1 + n2 + n3)\n  }\n\n  raw4D (x: number, y: number, z: number, w: number): number {\n    // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n    const s = (x + y + z + w) * (Math.sqrt(5.0) - 1.0) / 4.0 // Factor for 4D skewing\n    const i = Math.floor(x + s)\n    const j = Math.floor(y + s)\n    const k = Math.floor(z + s)\n    const l = Math.floor(w + s)\n    const t = (i + j + k + l) * FastSimplexNoise.G4 // Factor for 4D unskewing\n    const X0 = i - t // Unskew the cell origin back to (x,y,z,w) space\n    const Y0 = j - t\n    const Z0 = k - t\n    const W0 = l - t\n    const x0 = x - X0  // The x,y,z,w distances from the cell origin\n    const y0 = y - Y0\n    const z0 = z - Z0\n    const w0 = w - W0\n\n    // To find out which of the 24 possible simplices we're in, we need to determine the magnitude ordering of x0, y0,\n    // z0 and w0. Six pair-wise comparisons are performed between each possible pair of the four coordinates, and the\n    // results are used to rank the numbers.\n    let rankx = 0\n    let ranky = 0\n    let rankz = 0\n    let rankw = 0\n    if (x0 > y0) rankx++\n    else ranky++\n    if (x0 > z0) rankx++\n    else rankz++\n    if (x0 > w0) rankx++\n    else rankw++\n    if (y0 > z0) ranky++\n    else rankz++\n    if (y0 > w0) ranky++\n    else rankw++\n    if (z0 > w0) rankz++\n    else rankw++\n\n    // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n    // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n    // impossible. Only the 24 indices which have non-zero entries make any sense.\n    // We use a thresholding to set the coordinates in turn from the largest magnitude.\n    // Rank 3 denotes the largest coordinate.\n    const i1 = rankx >= 3 ? 1 : 0\n    const j1 = ranky >= 3 ? 1 : 0\n    const k1 = rankz >= 3 ? 1 : 0\n    const l1 = rankw >= 3 ? 1 : 0\n    // Rank 2 denotes the second largest coordinate.\n    const i2 = rankx >= 2 ? 1 : 0\n    const j2 = ranky >= 2 ? 1 : 0\n    const k2 = rankz >= 2 ? 1 : 0\n    const l2 = rankw >= 2 ? 1 : 0\n    // Rank 1 denotes the second smallest coordinate.\n    const i3 = rankx >= 1 ? 1 : 0\n    const j3 = ranky >= 1 ? 1 : 0\n    const k3 = rankz >= 1 ? 1 : 0\n    const l3 = rankw >= 1 ? 1 : 0\n\n    // The fifth corner has all coordinate offsets = 1, so no need to compute that.\n    const x1 = x0 - i1 + FastSimplexNoise.G4 // Offsets for second corner in (x,y,z,w) coords\n    const y1 = y0 - j1 + FastSimplexNoise.G4\n    const z1 = z0 - k1 + FastSimplexNoise.G4\n    const w1 = w0 - l1 + FastSimplexNoise.G4\n    const x2 = x0 - i2 + 2.0 * FastSimplexNoise.G4 // Offsets for third corner in (x,y,z,w) coords\n    const y2 = y0 - j2 + 2.0 * FastSimplexNoise.G4\n    const z2 = z0 - k2 + 2.0 * FastSimplexNoise.G4\n    const w2 = w0 - l2 + 2.0 * FastSimplexNoise.G4\n    const x3 = x0 - i3 + 3.0 * FastSimplexNoise.G4 // Offsets for fourth corner in (x,y,z,w) coords\n    const y3 = y0 - j3 + 3.0 * FastSimplexNoise.G4\n    const z3 = z0 - k3 + 3.0 * FastSimplexNoise.G4\n    const w3 = w0 - l3 + 3.0 * FastSimplexNoise.G4\n    const x4 = x0 - 1.0 + 4.0 * FastSimplexNoise.G4 // Offsets for last corner in (x,y,z,w) coords\n    const y4 = y0 - 1.0 + 4.0 * FastSimplexNoise.G4\n    const z4 = z0 - 1.0 + 4.0 * FastSimplexNoise.G4\n    const w4 = w0 - 1.0 + 4.0 * FastSimplexNoise.G4\n\n    // Work out the hashed gradient indices of the five simplex corners\n    const ii = i & 255\n    const jj = j & 255\n    const kk = k & 255\n    const ll = l & 255\n    const gi0 = this.perm[ii + this.perm[jj + this.perm[kk + this.perm[ll]]]] % 32\n    const gi1 = this.perm[ii + i1 + this.perm[jj + j1 + this.perm[kk + k1 + this.perm[ll + l1]]]] % 32\n    const gi2 = this.perm[ii + i2 + this.perm[jj + j2 + this.perm[kk + k2 + this.perm[ll + l2]]]] % 32\n    const gi3 = this.perm[ii + i3 + this.perm[jj + j3 + this.perm[kk + k3 + this.perm[ll + l3]]]] % 32\n    const gi4 = this.perm[ii + 1 + this.perm[jj + 1 + this.perm[kk + 1 + this.perm[ll + 1]]]] % 32\n\n    // Calculate the contribution from the five corners\n    const t0 = 0.5 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0\n    const n0 = t0 < 0 ? 0.0 : Math.pow(t0, 4) * this.dot(FastSimplexNoise.GRAD4D[gi0], [x0, y0, z0, w0])\n    const t1 = 0.5 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1\n    const n1 = t1 < 0 ? 0.0 : Math.pow(t1, 4) * this.dot(FastSimplexNoise.GRAD4D[gi1], [x1, y1, z1, w1])\n    const t2 = 0.5 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2\n    const n2 = t2 < 0 ? 0.0 : Math.pow(t2, 4) * this.dot(FastSimplexNoise.GRAD4D[gi2], [x2, y2, z2, w2])\n    const t3 = 0.5 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3\n    const n3 = t3 < 0 ? 0.0 : Math.pow(t3, 4) * this.dot(FastSimplexNoise.GRAD4D[gi3], [x3, y3, z3, w3])\n    const t4 = 0.5 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4\n    const n4 = t4 < 0 ? 0.0 : Math.pow(t4, 4) * this.dot(FastSimplexNoise.GRAD4D[gi4], [x4, y4, z4, w4])\n\n    // Sum up and scale the result to cover the range [-1,1]\n    return 72.37855765153665 * (n0 + n1 + n2 + n3 + n4)\n  }\n\n  scaled (coords: number[]): number | null {\n    switch (coords.length) {\n      case 2: return this.scaled2D(coords[0], coords[1])\n      case 3: return this.scaled3D(coords[0], coords[1], coords[2])\n      case 4: return this.scaled4D(coords[0], coords[1], coords[2], coords[3])\n      default: return null\n    }\n  }\n\n  scaled2D (x: number, y: number): number {\n    let amplitude = this.amplitude\n    let frequency = this.frequency\n    let maxAmplitude = 0\n    let noise = 0\n\n    for (let i = 0; i < this.octaves; i++) {\n      noise += this.raw2D(x * frequency, y * frequency) * amplitude\n      maxAmplitude += amplitude\n      amplitude *= this.persistence\n      frequency *= 2\n    }\n\n    return this.scale(noise / maxAmplitude)\n  }\n\n  scaled3D (x: number, y: number, z: number): number {\n    let amplitude = this.amplitude\n    let frequency = this.frequency\n    let maxAmplitude = 0\n    let noise = 0\n\n    for (let i = 0; i < this.octaves; i++) {\n      noise += this.raw3D(x * frequency, y * frequency, z * frequency) * amplitude\n      maxAmplitude += amplitude\n      amplitude *= this.persistence\n      frequency *= 2\n    }\n\n    return this.scale(noise / maxAmplitude)\n  }\n\n  scaled4D (x: number, y: number, z: number, w: number): number {\n    let amplitude = this.amplitude\n    let frequency = this.frequency\n    let maxAmplitude = 0\n    let noise = 0\n\n    for (let i = 0; i < this.octaves; i++) {\n      noise += this.raw4D(x * frequency, y * frequency, z * frequency, w * frequency) * amplitude\n      maxAmplitude += amplitude\n      amplitude *= this.persistence\n      frequency *= 2\n    }\n\n    return this.scale(noise / maxAmplitude)\n  }\n\n  spherical (circumference: number, coords: number[]): number | null {\n    switch (coords.length) {\n      case 3: return this.spherical3D(circumference, coords[0], coords[1], coords[2])\n      case 2: return this.spherical2D(circumference, coords[0], coords[1])\n      default: return null\n    }\n  }\n\n  spherical2D (circumference: number, x: number, y: number): number {\n    const nx = x / circumference\n    const ny = y / circumference\n    const rdx = nx * 2 * Math.PI\n    const rdy = ny * Math.PI\n    const sinY = Math.sin(rdy + Math.PI)\n    const sinRds = 2 * Math.PI\n    const a = sinRds * Math.sin(rdx) * sinY\n    const b = sinRds * Math.cos(rdx) * sinY\n    const d = sinRds * Math.cos(rdy)\n\n    return this.scaled3D(a, b, d)\n  }\n\n  spherical3D (circumference: number, x: number, y: number, z: number): number {\n    const nx = x / circumference\n    const ny = y / circumference\n    const rdx = nx * 2 * Math.PI\n    const rdy = ny * Math.PI\n    const sinY = Math.sin(rdy + Math.PI)\n    const sinRds = 2 * Math.PI\n    const a = sinRds * Math.sin(rdx) * sinY\n    const b = sinRds * Math.cos(rdx) * sinY\n    const d = sinRds * Math.cos(rdy)\n\n    return this.scaled4D(a, b, d, z)\n  }\n}\n","import { IEntity } from \"@zacktherrien/typescript-render-engine\";\nimport { SQUARE_SIZE, SQUARE_FOODS } from \"../constants\";\nimport { SquareColors } from \"../../colors\";\nimport { SquareType, LANDABLE_SQUARE_TYPES } from \"../types\";\nimport Vector2D from \"../../Vector2D\";\n\nexport interface ISquare extends IEntity {\n    readonly isLandable: boolean;\n\n    readonly x: number;\n    readonly y: number;\n\n    foodLevel: number;\n    getPixelCenter(): Vector2D;\n}\n\nexport default class Square implements ISquare {\n    \n    readonly isLandable: boolean;\n\n    x: number;\n    y: number;\n    center: Vector2D;\n\n    type: SquareType;\n\n    foodLevel: number;\n\n    constructor(x: number, y: number, type: SquareType) {\n        this.x = x;\n        this.y = y;\n        this.type = type;\n\n        this.isLandable = LANDABLE_SQUARE_TYPES.indexOf(this.type) !== -1;\n\n        this.center = new Vector2D(\n            this.x * SQUARE_SIZE + SQUARE_SIZE/2,\n            this.y * SQUARE_SIZE + SQUARE_SIZE/2\n        );\n\n        this.foodLevel = SQUARE_FOODS.get(this.type) || 0;\n    }\n\n    getPixelCenter() {\n        return this.center;\n    }\n\n    update(_: number) {\n    }\n\n    render(context: CanvasRenderingContext2D) {\n        context.fillStyle = SquareColors[this.type];\n        context.fillRect(this.x * SQUARE_SIZE, this.y * SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE);\n    }\n\n}","import { IDeferredLayer, DeferredLayer } from \"@zacktherrien/typescript-render-engine\";\nimport FastSimplexNoise from '../../../node_modules/fast-simplex-noise/src';\n\nimport Square, { ISquare } from \"./Square\";\nimport Vector2D from \"../Vector2D\";\n\nimport { LayerIndex } from \"../constants\";\nimport { SquareType, TerrainDefinitions } from \"./types\";\nimport { SQUARE_TERRAIN_DEFINITIONS, SQUARE_SIZE, TERRAIN_UPDATE_RATE } from \"./constants\";\n\nexport interface  ITerrain { \n    layer: IDeferredLayer;\n\n    getSquareAtLocation(position: Vector2D): ISquare | null;\n    getSquareAtCoord(x: number, y: number): ISquare | null;\n}\n\nexport default class Terrain implements ITerrain {\n\n    layer: IDeferredLayer;\n\n    squares: Array<Array<ISquare>>;\n\n    heightMap: FastSimplexNoise;\n\n    humidityMap: FastSimplexNoise;\n\n    moistureMap: FastSimplexNoise;\n\n    constructor() {\n        this.layer = new DeferredLayer(TERRAIN_UPDATE_RATE, LayerIndex.BACKGROUND);\n        this.layer.update(TERRAIN_UPDATE_RATE); // hacky :(\n\n        this.heightMap = new FastSimplexNoise({ \n            frequency: 0.01, \n            max: 1, \n            min: 0, \n            octaves: 4,\n        });\n        this.humidityMap = new FastSimplexNoise({\n            frequency: 0.01,\n            max: 1,\n            min: 0,\n            octaves: 8,\n        });\n        this.moistureMap = new FastSimplexNoise({\n            frequency: 0.01,\n            max: 1,\n            min: 0,\n            octaves: 8,\n        });\n\n        this.squares = [];\n\n        this.initSquares();\n    }\n\n    initSquares() {\n        const screenWidth = this.layer.getWidth();\n        const screenHeight = this.layer.getHeight();\n        const amountOfSquaresInX = Math.ceil(screenWidth/SQUARE_SIZE);\n        const amountOfSquaresInY = Math.ceil(screenHeight/SQUARE_SIZE);\n\n        let currentRow = [];\n        let square;\n        for(let y = 0; y<amountOfSquaresInY; y++) {\n            currentRow = [];\n            for(let x = 0; x<amountOfSquaresInX; x++) {\n                square = new Square(x, y, this.getTerrainType(x, y));\n                currentRow.push(square);\n                this.layer.addEntity(square);\n            }\n            this.squares.push(currentRow);\n        }\n    }\n\n    getSquareAtCoord(x: number, y: number): ISquare | null {\n        if(x > this.squares[0].length) {\n            return null;\n        }\n        if(y > this.squares.length) {\n            return null;\n        }\n        if(!this.squares || !this.squares[y] || !this.squares[y][x]) {\n            return null;\n        }\n        return this.squares[y][x];\n    }\n\n    getSquareAtLocation(position: Vector2D): ISquare | null {\n        const row = Math.floor(position.x2/SQUARE_SIZE);\n        const col = Math.floor(position.x1/SQUARE_SIZE);\n        if(col > this.squares[0].length) {\n            return null;\n        }\n        if(row > this.squares.length) {\n            return null;\n        }\n        if(!this.squares || !this.squares[row] || !this.squares[row][col]) {\n            return null;\n        }\n        return this.squares[row][col];\n    }\n\n    getTerrainType(x: number, y: number) {\n        const height = this.heightMap.scaled2D(x, y);\n        const humidity = this.humidityMap.scaled2D(x, y);\n        const moisture = this.moistureMap.scaled2D(x, y);\n        const squareType = this.squareTypeFromHeight(height, humidity, moisture);\n\n        return squareType;\n    }\n\n    squareTypeFromHeight(height: number, humidity: number, moisture: number): SquareType {\n        let foundType = null;\n        SQUARE_TERRAIN_DEFINITIONS.forEach((values: TerrainDefinitions, type: SquareType) => {\n            if(height >= values.height.min && height <= values.height.max) {\n                if(humidity >= values.humidity.min && humidity <= values.humidity.max) {\n                    if(moisture >= values.moisture.min && moisture <= values.moisture.max) {\n                        foundType = type;\n                    }\n                }\n            }\n        });\n        if(foundType === null) {\n            ;;debugger;;\n            throw new Error();\n        }\n        return foundType;\n    }\n}","import Vector2D from \"../../Vector2D\";\nimport { IMouseTool } from \"..\";\n\nexport interface ISelectionTool extends IMouseTool {\n    updatePosition(newPosition: Vector2D): void;\n    getGeometry(): {\n        top: number;\n        left: number;\n        width: number;\n        height: number;\n    };\n}\n\nexport default class SelectionTool implements ISelectionTool {\n\n    initialPosition: Vector2D;\n    position: Vector2D;\n\n    top: number;\n    left: number;\n    width: number;\n    height: number;\n\n    constructor(initialPosition: Vector2D) {\n        this.initialPosition = initialPosition;\n        this.position = initialPosition;\n\n        this.top = 0;\n        this.left = 0;\n        this.width = 0;\n        this.height = 0;\n    }\n\n    getGeometry() {\n        return {\n            top: this.top,\n            left: this.left,\n            width: this.width, \n            height: this.height,\n        };\n    }\n\n    updatePosition(newPosition: Vector2D) {\n        this.position = newPosition;\n        \n        this.left = Math.min(this.initialPosition.x1, this.position.x1);\n        this.top = Math.min(this.initialPosition.x2, this.position.x2);\n\n        const right = Math.max(this.initialPosition.x1, this.position.x1);\n        const bottom = Math.max(this.initialPosition.x2, this.position.x2);\n        this.width = right - this.left;\n        this.height = bottom - this.top;\n    }\n\n    render(context: CanvasRenderingContext2D) {\n        context.strokeStyle = '#0F0';\n        context.strokeRect(\n            this.left, this.top,\n            this.width, this.height\n        );\n    }\n}","import { IEntity, StaticLayer, IStaticLayer } from \"@zacktherrien/typescript-render-engine\";\nimport { LayerIndex } from \"../constants\";\nimport Vector2D from \"../Vector2D\";\nimport Boids from \"..\";\nimport SelectionTool from \"./SelectionTool\";\n\nexport interface IMouseTool extends IEntity {\n    updatePosition(newPosition: Vector2D): void;\n    getGeometry(): {\n        top: number;\n        left: number;\n        width: number;\n        height: number;\n    };\n}\n\nexport interface IMouseToolsManager {\n    layer: IStaticLayer;\n}\n\nexport default class MouseToolsManager implements IMouseToolsManager {\n    layer: IStaticLayer;\n\n    initialMouseLocation: Vector2D;\n    mouseLocation: Vector2D;\n\n    currentTool: IMouseTool | null;\n\n    constructor() {\n        this.layer = new StaticLayer(LayerIndex.TOOLS);\n\n        this.currentTool = null;\n\n        this.initialMouseLocation = Vector2D.ZERO();\n        this.mouseLocation = Vector2D.ZERO();\n\n        document.addEventListener('mousedown', this.handleMouseDown.bind(this));\n        document.addEventListener('mouseup', this.handleMouseUp.bind(this));\n        document.addEventListener('mousemove', this.handleMouseMove.bind(this));\n        document.addEventListener('contextmenu', event => event.preventDefault());\n    }\n\n    chooseTool(tool: IMouseTool) {\n        this.resetTool();\n\n        this.currentTool = tool;\n        this.layer.addEntity(this.currentTool);\n    }\n\n    resetTool() {\n        if (this.currentTool) {\n            this.layer.removeEntity(this.currentTool);\n            this.layer.allowRenderOnNextFrame();\n        }\n    }\n\n    handleMouseDown(e: MouseEvent) {\n        if(e.button !== 0) {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n        }\n        this.mouseLocation = new Vector2D(e.offsetX, e.offsetY);\n        \n        this.chooseTool(new SelectionTool(this.mouseLocation));\n    }\n\n    handleMouseMove(e: MouseEvent) {\n        this.mouseLocation = new Vector2D(e.offsetX, e.offsetY);\n\n        if(this.currentTool) {\n            this.layer.allowRenderOnNextFrame();\n            \n            this.currentTool.updatePosition(this.mouseLocation);\n        }\n    }\n\n    handleMouseUp() {\n        if(!this.currentTool) return;\n\n        const { left, top, width, height } = this.currentTool?.getGeometry();\n\n        const right = left + width;\n        const bottom = top + height;\n\n        for(let i = 0; i<Boids.instance.birds.length; i++) {\n            if(\n                Boids.instance.birds[i].position.x1 < right &&\n                Boids.instance.birds[i].position.x1 > left &&\n                Boids.instance.birds[i].position.x2 < bottom &&\n                Boids.instance.birds[i].position.x2 > top\n            ) {\n                console.log(Boids.instance.birds[i]);\n            }\n        }\n\n        this.resetTool();\n    }\n}","import Engine, { IEngine, DynamicLayer, IRenderingLayer } from '@zacktherrien/typescript-render-engine';\n\nimport { LayerIndex, BIRD_COUNT } from './constants';\n\nimport Bird, { IBird, } from './Bird';\nimport Terrain, { ITerrain } from './Terrain';\nimport MouseTools, { IMouseToolsManager } from './MouseTools';\n\nexport default class Boids {\n\n    static instance: Boids;\n\n    maxX: number;\n    maxY: number;\n\n    engine: IEngine;\n    terrain: ITerrain;\n    mouseTools: IMouseToolsManager;\n\n    birdLayer: IRenderingLayer;\n    birds: Array<IBird>;\n\n    constructor() {\n        Boids.instance = this;\n        this.mouseTools = new MouseTools();\n        this.terrain = new Terrain();\n\n        this.birdLayer = new DynamicLayer(LayerIndex.BIRDS);\n        this.maxX = this.birdLayer.getWidth();\n        this.maxY = this.birdLayer.getHeight();\n\n        this.birds = [];\n        for(let i = 0; i<BIRD_COUNT; i++) {\n            // add a bird at a random location in our layer.\n            const bird = new Bird(\n                this,\n                Math.random() * this.birdLayer.getWidth(), \n                Math.random() * this.birdLayer.getHeight()\n            );\n\n            this.birds.push(bird);\n            this.birdLayer.addEntity(bird);\n        }\n\n        this.engine = new Engine();\n\n        this.engine.registerLayer(this.terrain.layer);\n        this.engine.registerLayer(this.mouseTools.layer);\n        this.engine.registerLayer(this.birdLayer);\n        this.engine.start();\n        this.terrain.layer.render();\n    }\n}","import Boids from './Boids';\n\nfunction load() {\n    const boids = new Boids();\n    // @ts-ignore\n    window.boids = boids;\n}\n\nwindow.addEventListener('load', load)"]}