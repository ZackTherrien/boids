{"version":3,"sources":["../node_modules/@zacktherrien/typescript-render-engine/dist/types.js","../node_modules/@zacktherrien/typescript-render-engine/dist/Engine/index.js","../node_modules/@zacktherrien/typescript-render-engine/dist/RenderingLayer/index.js","../node_modules/@zacktherrien/typescript-render-engine/dist/index.js","Boids/constants.ts","Boids/Vector2D/index.ts","Boids/helpers.ts","Boids/Bird/index.ts","Boids/index.ts","index.ts"],"names":[],"mappings":"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","file":"src.94493487.js","sourceRoot":"../src","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LayerType;\n(function (LayerType) {\n    LayerType[LayerType[\"STATIC\"] = 0] = \"STATIC\";\n    LayerType[LayerType[\"DYNAMIC\"] = 1] = \"DYNAMIC\";\n})(LayerType = exports.LayerType || (exports.LayerType = {}));\nvar ResizeMethod;\n(function (ResizeMethod) {\n    ResizeMethod[ResizeMethod[\"FROM_ORIGIN\"] = 0] = \"FROM_ORIGIN\";\n    ResizeMethod[ResizeMethod[\"FROM_CENTER\"] = 1] = \"FROM_CENTER\";\n})(ResizeMethod = exports.ResizeMethod || (exports.ResizeMethod = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst types_1 = require(\"../types\");\nclass Engine {\n    constructor() {\n        this.staticLayers = [];\n        this.dynamicLayers = [];\n        this.shouldRender = true;\n        this.lastFrameRenderedTime = null;\n        this.renderingId = null;\n        this.requestFrameA = this.requestFrameA.bind(this);\n        this.requestFrameB = this.requestFrameB.bind(this);\n    }\n    getLayer(layerIndex, layerType) {\n        if (layerType === types_1.LayerType.DYNAMIC) {\n            return this.dynamicLayers.find((layer) => layer.layerIndex === layerIndex) || null;\n        }\n        else {\n            return this.staticLayers.find((layer) => layer.layerIndex === layerIndex) || null;\n        }\n    }\n    registerLayer(layer) {\n        if (layer.layerType === types_1.LayerType.DYNAMIC) {\n            this.dynamicLayers.push(layer);\n        }\n        else {\n            this.staticLayers.push(layer);\n        }\n    }\n    start() {\n        this.shouldRender = true;\n        this.renderingId = window.requestAnimationFrame(this.requestFrameA);\n    }\n    stop() {\n        this.shouldRender = false;\n        if (this.renderingId) {\n            window.cancelAnimationFrame(this.renderingId);\n        }\n    }\n    requestFrameA(timestamp) {\n        this.render(timestamp);\n        if (this.shouldRender) {\n            this.renderingId = window.requestAnimationFrame(this.requestFrameB);\n        }\n    }\n    requestFrameB(timestamp) {\n        this.render(timestamp);\n        if (this.shouldRender) {\n            this.renderingId = window.requestAnimationFrame(this.requestFrameA);\n        }\n    }\n    render(timestamp = 0) {\n        if (!this.lastFrameRenderedTime) {\n            this.lastFrameRenderedTime = timestamp;\n        }\n        const deltaTime = timestamp - this.lastFrameRenderedTime;\n        this.lastFrameRenderedTime = timestamp;\n        for (let i = 0; i < this.dynamicLayers.length; i++) {\n            this.dynamicLayers[i].update(deltaTime);\n            this.dynamicLayers[i].render();\n        }\n    }\n}\nexports.default = Engine;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst types_1 = require(\"../types\");\nclass RenderingLayer {\n    constructor(layerIndex, layerType, initialWidth, initialHeight, initialX = 0, initialY = 0) {\n        this.layerIndex = layerIndex;\n        this.layerType = layerType;\n        this.entities = [];\n        this.width = initialWidth === undefined ? document.body.clientWidth + 1 : initialWidth;\n        this.height = initialHeight === undefined ? document.body.clientHeight + 1 : initialHeight;\n        this.x = initialX;\n        this.y = initialY;\n        const canvas = document.createElement('canvas');\n        canvas.style.position = 'absolute';\n        canvas.style.zIndex = `${this.layerIndex}`;\n        canvas.style.display = 'inline';\n        document.body.appendChild(canvas);\n        const context = canvas.getContext('2d');\n        if (!context) {\n            throw new Error('Could not initialize canvas 2D context.');\n        }\n        this.context = context;\n        this.context.translate(-0.5, -0.5);\n        this.resize(this.width, this.height);\n        this.setPosition(this.x, this.y);\n    }\n    resize(newWidth, newHeight, resizeMethod = types_1.ResizeMethod.FROM_ORIGIN) {\n        let xOffset = 0;\n        let yOffset = 0;\n        if (resizeMethod === types_1.ResizeMethod.FROM_CENTER) {\n            xOffset = (this.width - newWidth) / 2;\n            yOffset = (this.height - newHeight) / 2;\n        }\n        this.width = newWidth;\n        this.height = newHeight;\n        this.context.canvas.width = this.width;\n        this.context.canvas.height = this.height;\n        this.setPosition(this.x + xOffset, this.y + yOffset);\n    }\n    setPosition(newX, newY) {\n        this.x = newX;\n        this.y = newY;\n        if (!this._isLayerWithinBounds()) {\n            throw new Error('Cannot position and resize a layer outside of document body.');\n        }\n        this.context.canvas.style.left = `${this.x}px`;\n        this.context.canvas.style.top = `${this.y}px`;\n    }\n    addEntity(entity) {\n        if (!this._entityIsRenderable(entity)) {\n            throw new Error('All entities must have a render function.');\n        }\n        if (this.layerType === types_1.LayerType.DYNAMIC && !this._entityIsUpdatable(entity)) {\n            throw new Error('All entities of dynamic layers must have an updater function.');\n        }\n        this.entities.push(entity);\n    }\n    removeEntity(removeEntity) {\n        const renderersIdx = this.entities.indexOf(removeEntity);\n        if (renderersIdx !== -1) {\n            this.entities.splice(renderersIdx, 1);\n        }\n    }\n    getWidth() {\n        return this.width;\n    }\n    getHeight() {\n        return this.height;\n    }\n    getX() {\n        return this.x;\n    }\n    getY() {\n        return this.y;\n    }\n    getContext() {\n        return this.context;\n    }\n    clear() {\n        this.context.clearRect(-1, -1, this.width, this.height);\n    }\n    update(deltaTime) {\n        if (this.layerType !== types_1.LayerType.DYNAMIC) {\n            return;\n        }\n        for (let i = 0; i < this.entities.length; i++) {\n            this.entities[i].update(deltaTime);\n        }\n    }\n    render() {\n        this.clear();\n        for (let i = 0; i < this.entities.length; i++) {\n            this.entities[i].render(this.context);\n        }\n    }\n    _entityIsRenderable(entity) {\n        return Boolean(entity.render);\n    }\n    _entityIsUpdatable(entity) {\n        return Boolean(entity.update);\n    }\n    _isLayerWithinBounds() {\n        return (this.width + this.x > document.body.clientWidth ||\n            this.height + this.y > document.body.clientHeight ||\n            this.x < 0 ||\n            this.y < 0);\n    }\n}\nexports.RenderingLayer = RenderingLayer;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Engine_1 = __importDefault(require(\"./Engine\"));\nvar RenderingLayer_1 = require(\"./RenderingLayer\");\nexports.RenderingLayer = RenderingLayer_1.RenderingLayer;\n__export(require(\"./types\"));\nexports.default = Engine_1.default;\n","\nexport const BIRD_COUNT = 500;\n\nexport const BIRD_WIDTH = 4;\nexport const BIRD_HEIGHT = 2;\nexport const BIRD_SPEED = 100 / 1000; // 60 pixels per 1000ms\nexport const BIRD_VISUAL_RANGE = 75;\nexport const BIRD_RETURN_VELOCITY = 0;\n\nexport const BIRD_SEPARATION_DISTANCE = 2*Math.sqrt(BIRD_WIDTH*BIRD_WIDTH + BIRD_HEIGHT*BIRD_HEIGHT); // x pixels before they move apart\nexport const BIRD_SEPARATION_EAGERNESS = 0.2;\nexport const BIRD_COHESION_EAGERNESS = 0.01; // Where 0 = Not Eager. 1 = Immediate change to coalesse\nexport const BIRD_ALIGNMENT_EAGERNESS = 0.1; // Where 0 = Not Eager. 1 = Immediate change.\n\nexport const SIGHT_ANGLE = Math.PI*0.5; // Almost 180 degree vision per eye.\nexport const SIGHT_RANGE = 50; // 50 pixels\n\nexport enum LayerIndex {\n    BACKGROUND,\n    BIRDS\n};","export default class Vector2D {\n\n    x1: number;\n    x2: number;\n\n    constructor(x1: number = 0, x2: number = 0) {\n        this.x1 = x1;\n        this.x2 = x2;\n    }\n\n    static ZERO() {\n        return new Vector2D(0, 0);\n    }\n\n    static ONE() {\n        return new Vector2D(1, 1);\n    }\n\n    static CONST_ZERO = Vector2D.ZERO();\n    static CONST_ONE = Vector2D.ONE();\n\n    null() {\n        this.x1 = 0;\n        this.x2 = 0;\n    }\n\n    add(vector: Vector2D) {\n        this.x1 += vector.x1;\n        this.x2 += vector.x2;\n        return this;\n    }\n    \n    sub(vector: Vector2D) {\n        this.x1 -= vector.x1;\n        this.x2 -= vector.x2;\n        return this;\n    }\n\n    multiply(scalar: number) {\n        this.x1 *= scalar;\n        this.x2 *= scalar;\n        return this;\n    }\n\n    divide(scalar: number) {\n        this.x1 /= scalar;\n        this.x2 /= scalar;\n        return this;\n    }\n\n    normalize() {\n        const mag = this.magnitude();\n        if(mag === 0) {\n            return Vector2D.ZERO();\n        }\n        return this.divide(mag);\n    }\n\n    magnitude() {\n        return Math.sqrt(this.x1 * this.x1 + this.x2 * this.x2);\n    }\n\n    distance(vector: Vector2D): number {\n        return Math.sqrt((this.x1 - vector.x1) ** 2 + (this.x2 - vector.x2) ** 2)\n    }\n\n    clone() {\n        return new Vector2D(this.x1, this.x2);\n    }\n}","import Vector2D from \"./Vector2D\";\n\n/**\n * @param degree A number between 0 and 360\n */\nexport const fromDegree = (degree: number) => {\n    return degree * Math.PI / 180;\n};\n\nexport const getAngle = (vector: Vector2D) => {\n    return Math.atan2(vector.x2, vector.x1);\n}\n\nexport const flipVector = (vector: Vector2D, plane: 'x' | 'y', direction: 'left' | 'right' | 'up' | 'down') => {\n    const angle = getAngle(vector);\n\n\n    let normal = 0;\n    if (plane === 'x' && direction === 'left') {\n        normal = 0;\n    } else if (plane === 'x' && direction === 'right') {\n        normal = Math.PI;\n    } else if (plane === 'y' && direction === 'up') {\n        normal = Math.PI*0.5;\n    } else if (plane === 'y' && direction === 'down') {\n        normal = Math.PI*1.5;\n    }\n    const newAngle = normal * 2 - Math.PI - angle;\n\n    vector.x1 = Math.cos(newAngle);\n    vector.x2 = Math.sin(newAngle);\n};","import { IEntity } from \"@zacktherrien/typescript-render-engine\";\n\nimport Vector2D from \"../Vector2D\";\n\nimport Boids from '../';\n\nimport { \n    BIRD_WIDTH, \n    BIRD_HEIGHT, \n    BIRD_SPEED, \n    BIRD_COHESION_EAGERNESS, \n    BIRD_SEPARATION_DISTANCE,\n    BIRD_SEPARATION_EAGERNESS,\n    BIRD_ALIGNMENT_EAGERNESS,\n    BIRD_VISUAL_RANGE,\n} from '../constants';\nimport { fromDegree, getAngle } from '../helpers';\n\nexport interface IBird extends IEntity {\n    position: Vector2D;\n    velocity: Vector2D;\n}\n\nexport default class Bird implements IBird {\n    \n    boids: Boids;\n    maxX: number;\n    maxY: number;\n\n    position: Vector2D;\n    velocity: Vector2D;\n    acceleration: Vector2D;\n\n    cohesionAccumulator: Vector2D;\n    separationAccumulator: Vector2D;\n    alignmentAccumulator: Vector2D;\n\n    // visibilityLeft: Vector2D;\n    // visibilityRight: Vector2D;\n\n    constructor(boids: Boids, initialX: number, initialY: number, maxX: number, maxY: number) {\n        this.boids = boids;\n\n        this.maxX = maxX;\n        this.maxY = maxY;\n\n        this.position = new Vector2D(initialX, initialY);\n        const randomAngle = fromDegree(Math.random() * 360);\n        this.velocity = new Vector2D(\n            Math.cos(randomAngle),\n            Math.sin(randomAngle)\n        )\n            .normalize()\n            .multiply(BIRD_SPEED);\n\n        this.acceleration = Vector2D.ZERO();\n\n        // this.visibilityLeft = new Vector2D(SIGHT_ANGLE - 0.01*Math.PI, SIGHT_RANGE);\n        // this.visibilityRight = new Vector2D(-SIGHT_ANGLE - 0.01*Math.PI, SIGHT_RANGE);\n\n        // Accumulators for performance\n        this.cohesionAccumulator = Vector2D.ZERO();\n        this.separationAccumulator = Vector2D.ZERO();\n        this.alignmentAccumulator = Vector2D.ZERO();\n    }\n\n    resetAccumulators() {\n        this.acceleration.null();\n\n        this.cohesionAccumulator.null();\n        this.separationAccumulator.null();\n        this.alignmentAccumulator.null();\n    }\n\n    /**\n     * Perform all maneuvers for this bird.\n     * @param birds The birds in range of this bird\n     */\n    performManeuvers(birds: Array<IBird>) {\n        this.resetAccumulators();\n\n        let perceivedBirdCount = 0;\n        for(let i = 0; i<birds.length; i++) {\n            if(birds[i] !== this && birds[i].position.distance(this.position) < BIRD_VISUAL_RANGE) {\n                perceivedBirdCount += 1;\n                this.accumulateCohesion(birds[i]);\n                this.accumulateSeparation(birds[i]);\n                this.accumulateAlignment(birds[i]);\n            }\n        }\n\n        // Flock mechanics\n        if(perceivedBirdCount !== 0) {\n            this.acceleration\n                .add(this.performCohesion(perceivedBirdCount))\n                .add(this.performSeparation(perceivedBirdCount))\n                .add(this.performAlignment(perceivedBirdCount));\n                // TODO: Limit acceleration.\n        }\n\n        // Goal seeking\n        // this.velocity\n        //     .add(this.checkGoals())\n        //     .add(this.checkPredators());\n        \n        this.checkBoundary();\n        this.checkVelocity();\n    }\n\n    accumulateCohesion(bird: IBird) {\n        this.cohesionAccumulator.add(bird.position);\n    }\n\n    accumulateSeparation(bird: IBird) {\n        const positionDiff = this.position\n            .clone()             // must clone because Vector2D is mutable\n            .sub(bird.position); // find the difference to the other bird\n\n        const distance = positionDiff.magnitude(); // find the distance\n        if(distance <= BIRD_SEPARATION_DISTANCE) {\n            this.separationAccumulator.add(     // add the force to our accumulator\n                positionDiff.divide(distance)\n            );\n        }\n    }\n\n    accumulateAlignment(bird: IBird) {\n        this.alignmentAccumulator.add(bird.velocity);\n    }\n\n    performCohesion(birdCount: number): Vector2D {\n        return this.cohesionAccumulator\n            .divide(birdCount)      // average position of other birds\n            .sub(this.position)     // how far away are they from this bird\n            .normalize()            // not normalizing means the average positions cancel out and the birds grind to a halt.\n            .multiply(BIRD_SPEED)   // \n            .sub(this.velocity)     // subtract our velocity to get the force\n            .multiply(BIRD_COHESION_EAGERNESS); // change how fast birds want to coalesce\n    }\n\n    performSeparation(birdCount: number): Vector2D {\n        return this.separationAccumulator\n            .divide(birdCount)\n            .normalize()            // not normalizing means the average velocities cancel out and the birds grind to a halt.\n            .multiply(BIRD_SPEED)   // \n            .sub(this.velocity)     // find the difference between the separation velocity and ours.\n            .multiply(BIRD_SEPARATION_EAGERNESS); // Change how fast birds want to align. 0 = No alignment, 1 = Immediate alignment.\n    }\n\n    performAlignment(birdCount: number): Vector2D {\n        return this.alignmentAccumulator\n            .divide(birdCount)      // average velocity of other birds\n            .normalize()            // not normalizing means the average velocities cancel out and the birds grind to a halt.\n            .multiply(BIRD_SPEED)   // \n            .sub(this.velocity)     // subtract our velocity to get the force\n            .multiply(BIRD_ALIGNMENT_EAGERNESS); // Change how fast birds want to align. 0 = No alignment, 1 = Immediate alignment.\n    }\n\n    checkPredators() {\n        if (this.boids.isRightClicked) {\n            return this.boids.mouseLocation\n                .clone()\n                .sub(this.position)\n                .divide(BIRD_COHESION_EAGERNESS)\n                .multiply(-1);\n        }\n        return Vector2D.CONST_ZERO;\n    }\n\n    checkGoals() {\n        if (this.boids.isLeftClicked) {\n            return this.boids.mouseLocation\n                .clone()\n                .sub(this.position)\n                .divide(BIRD_COHESION_EAGERNESS);\n        }\n        return Vector2D.CONST_ZERO;\n    }\n\n    checkBoundary() {\n        if(this.position.x1 < 0){\n            this.position.x1 = this.maxX\n        } else if(this.position.x1 > this.maxX){\n            this.position.x1 = 0;\n        }\n        if(this.position.x2 < 0){\n            this.position.x2 = this.maxY;\n        } else if(this.position.x2 > this.maxY){\n            this.position.x2 = 0;\n        }\n    }\n\n    checkVelocity() {\n        // limit velocity:\n        // if (this.velocity.magnitude() > BIRD_SPEED) {\n            this.velocity\n                .normalize()\n                .multiply(BIRD_SPEED);\n        // }\n    }\n\n    update(deltaTime: number) {\n        this.performManeuvers(this.boids.birds);\n\n        this.position.add(\n            this.velocity\n                .clone() // we must clone because multiply mutates the object.\n                .multiply(deltaTime)\n        );\n        this.velocity.add(this.acceleration);\n    }\n\n    render(context: CanvasRenderingContext2D) {\n        this.rotate(context);\n        context.strokeStyle = 'red';\n        context.beginPath();\n        context.moveTo(this.position.x1 + BIRD_WIDTH/2, this.position.x2);\n        context.lineTo(this.position.x1 - BIRD_WIDTH/2, this.position.x2 + BIRD_HEIGHT/2);\n        context.lineTo(this.position.x1 - BIRD_WIDTH/2, this.position.x2 - BIRD_HEIGHT/2);\n        context.closePath();\n        context.stroke();\n\n        // context.strokeStyle = 'green';\n        // context.beginPath();\n        // context.arc(this.position.x1, this.position.x2, this.visibilityLeft.x2, this.visibilityLeft.x1, this.visibilityLeft.x1 - SIGHT_ANGLE, true);\n\n        // context.stroke();\n\n        // context.beginPath();\n        // context.arc(this.position.x1, this.position.x2, this.visibilityRight.x2, this.visibilityRight.x1, Math.PI, true);\n        // context.closePath();\n        // context.stroke();\n\n        \n        this.unrotate(context);\n    }\n\n    rotate(context: CanvasRenderingContext2D) {\n        // Move registration point to the center of the bird\n        context.translate(this.position.x1, this.position.x2);\n        // Rotate degree\n        context.rotate(getAngle(this.velocity));\n        context.translate(-this.position.x1, -this.position.x2);\n    }\n\n    unrotate(context: CanvasRenderingContext2D) {\n        context.translate(this.position.x1, this.position.x2);\n        // Rotate degree\n        context.rotate(-getAngle(this.velocity));\n        // Move registration point back to the top left corner of canvas\n        context.translate(-this.position.x1, -this.position.x2);\n    }\n}","import Engine, { IEngine, RenderingLayer, LayerType, IRenderingLayer } from '@zacktherrien/typescript-render-engine';\n\nimport { LayerIndex, BIRD_COUNT } from './constants';\n\nimport Bird, { IBird, } from './Bird';\nimport Vector2D from './Vector2D';\n\nexport default class Boids {\n\n    engine: IEngine;\n    background: IRenderingLayer;\n\n    birdLayer: IRenderingLayer;\n    birds: Array<IBird>;\n\n    isLeftClicked: boolean;\n    isRightClicked: boolean;\n    mouseLocation: Vector2D;\n\n    constructor() {\n        this.background = new RenderingLayer(LayerIndex.BACKGROUND, LayerType.STATIC);\n        this.birdLayer = new RenderingLayer(LayerIndex.BIRDS, LayerType.DYNAMIC);\n\n        this.birds = [];\n        for(let i = 0; i<BIRD_COUNT; i++) {\n            // add a bird at a random location in our layer.\n            const bird = new Bird(\n                this,\n                Math.random() * this.birdLayer.getWidth(), \n                Math.random() * this.birdLayer.getHeight(),\n                this.birdLayer.getWidth(),\n                this.birdLayer.getHeight(),\n            );\n\n            this.birds.push(bird);\n            this.birdLayer.addEntity(bird);\n        }\n\n        this.isLeftClicked = false;\n        this.isRightClicked = false;\n        this.mouseLocation = Vector2D.ZERO();\n\n        this.engine = new Engine();\n\n        this.engine.registerLayer(this.background);\n        this.engine.registerLayer(this.birdLayer);\n        this.engine.start();\n\n        document.addEventListener('mousedown', this.handleMouseDown.bind(this));\n        document.addEventListener('mouseup', this.handleMouseUp.bind(this));\n        document.addEventListener('mousemove', this.handleMouseMove.bind(this));\n        document.addEventListener('contextmenu', event => event.preventDefault());\n    }\n\n    handleMouseDown(e: MouseEvent) {\n        if(e.button === 0) {\n            this.isLeftClicked = true;\n        } else {\n            this.isRightClicked = true;\n            e.preventDefault();\n            e.stopImmediatePropagation();\n        }\n        this.mouseLocation = new Vector2D(e.offsetX, e.offsetY);\n    }\n\n    handleMouseMove(e: MouseEvent) {\n        this.mouseLocation = new Vector2D(e.offsetX, e.offsetY);\n    }\n\n    handleMouseUp() {\n        this.isLeftClicked = false;\n        this.isRightClicked = false;\n        this.mouseLocation = Vector2D.ZERO();\n    }\n}","import Boids from './Boids';\n\nfunction load() {\n    const boids = new Boids();\n    // @ts-ignore\n    window.boids = boids;\n}\n\nwindow.addEventListener('load', load)"]}